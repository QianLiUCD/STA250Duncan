a1
a1.2
a2 <- select(a1, Origin:Month, ArrDelay)
a2
a2 <- select(a1, Month:Origin, ArrDelay)
a2
a2.2 <- select(a1.2, Origin:Month, ArrDelay)
colnames(a1.2)
colnames(a2.2)
colnames(a2)
a2
a2.2
a3 <- summarise(a2, arr = mean(ArrDelay, na.rm = TRUE))
a3.2 <- summarise(a2.2, arr = mean(ArrDelay, na.rm = TRUE))
summarise(baseball,
duration = max(year) - min(year),
nteams = length(unique(team)))
ddply(baseball, "id", summarise,
duration = max(year) - min(year),
nteams = length(unique(team)))
ddply(baseball, "id", summarise,
duration = max(year) - min(year),
nteams = length(unique(team)))
head(ddply(baseball, "State", summarise,
duration = max(year) - min(year),
nteams = length(unique(team)))
)
head(ddply(baseball, "State", summarise,
duration = max(year) - min(year),
nteams = length(unique(team)))
)
ddply(data, "State", summarise,
arr = mean(ArrDelay))
ddply(Origin, "State", summarise,
arr = mean(ArrDelay))
ddply(data,"Origin", summarise,
arr = mean(ArrDelay))
ddply(data,"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
ddply(subset(data,Month=10),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
cbind(ddply(subset(data,Month=10),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep("10",237))
a=cbind(ddply(subset(data,Month=10),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep("10",237))
b=cbind(ddply(subset(data,Month=11),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep("11",237))
c=cbind(ddply(subset(data,Month=12),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep("12",237))
new=rbind(a,b,c)
head(a)
head(b)
head(c)
name(a)
names(a)
names(a)=NULL
names(a)=NULL;names(b)=NULL;names(c)=NULL
new=rbind(a,b,c)
a
b
c
new=rbind(a,b,c)
class(a)
class(b)
class(v)
class(c)
dim(a)
dim(b)
dim(c)
new=rbind(a,b,c)
a=cbind(ddply(subset(data,Month=10),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep(10,237))
b=cbind(ddply(subset(data,Month=11),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep(11,237))
c=cbind(ddply(subset(data,Month=12),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T)),rep(12,237))
names(a)=NULL;names(b)=NULL;names(c)=NULL
new=rbind(a,b,c)
a=cbind(ddply(subset(data,Month=10),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
)
b=cbind(ddply(subset(data,Month=11),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
b=cbind(ddply(subset(data,Month=11),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
b=cbind(ddply(subset(data,Month=11),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
)
c=cbind(ddply(subset(data,Month=12),"Origin", summarise,
arr = mean(ArrDelay,na.rm=T))
)
new=rbind(a,b,c)
View(new)
seq(10:11)
seq(10,12)
dim(a)
dim(b)
dim(c)
as.integer(seq(10,12))
new$Month = rep(as.integer(seq(10,12)),237)
head(new)
head(city)
new2 = merge(new,city, by.x = "Origin", by.y = "IATA")
head(new2)
colnames(tt)=c("State","City","Code","Name")
new2 = merge(new,tt,by.x="Origin",by.y="Code")
head(new2)
class(new2[,4])
new2[,4] = as.character(new2[,4])
class(new2[,3])
ichoropleth(arr ~ State , data = new2, animate = "Month", play = F)
stateDelay =
ichoropleth(arr ~ State , data = new2, animate = "Month", play = F)
library(plyr)
library(rMaps)
venues <- structure(list(
name = c("pivotal", "aol", "columbia", "pivotal"),
lat = c(40.7403372, 40.7308948, 40.8074358, 40.7403372),
lon = c(-73.9951462, -73.9917096, -73.9625858,-73.9951462)),
.Names = c("name", "lat", "lon"),
row.names = c(NA, -4L),
class = "data.frame"
)
times_square <- c(40.7577, -73.9857)
map <- Leaflet$new()
map$setView(times_square, zoom = 10)
mk_polygon <- function(lats, lons){
stopifnot(length(lats)==length(lons))
coord_list <- llply(seq_along(lats), function(i) c(lons[[i]], lats[[i]]))
list(
type = 'Feature',
properties = list(name = 'mypolygon'),
geometry = list(
type = 'Polygon',
coordinates = list(coord_list)
)
)
}
polygons <- mk_polygon(venues$lat, venues$lon)
map$geoJson(list(polygons))
map
venues
list(polygons)
mapDep
airportPoint30
head(airportPoint30)
polygons <- mk_polygon(airportPoint30$lat, airportPoint30$lon)
mapDep$geoJson(list(polygons))
mapDep
list(polygons)
coord_list
lats
venues
lats=40.74034
lon=-73.99515
length(lats)==length(lons)
lons=-73.99515
length(lats)==length(lons)
length(lats)
stopifnot(length(lats)==length(lons))
seq_along(lats)
coord_list <- llply(seq_along(lats), function(i) c(lons[[i]], lats[[i]]))
coord_list
mk_polygon <- function(lats, lons){
stopifnot(length(lats)==length(lons))
coord_list <- llply(seq_along(lats), function(i) c(lons[[i]], lats[[i]]))
list(
type = 'Feature',
properties = list(name = 'mypolygon'),
geometry = list(
#type = 'Polygon',
type = 'Circle',
coordinates = list(coord_list)
)
)
}
polygons <- mk_polygon(venues$lat, venues$lon)
map$geoJson(list(polygons))
map
polygons <- mk_polygon(airportPoint30$lat, airportPoint30$lon)
mapDep$geoJson(list(polygons))
mapDep
mk_polygon <- function(lats, lons){
stopifnot(length(lats)==length(lons))
coord_list <- llply(seq_along(lats), function(i) c(lons[[i]], lats[[i]]))
list(
type = 'Feature',
properties = list(name = 'mypolygon'),
geometry = list(
type = 'Polygon',
#type = 'Circle',
coordinates = list(coord_list)
)
)
}
polygons <- mk_polygon(venues$lat, venues$lon)
map$geoJson(list(polygons))
map
mk_polygon <- function(lats, lons){
stopifnot(length(lats)==length(lons))
coord_list <- llply(seq_along(lats), function(i) c(lons[[i]], lats[[i]]))
list(
type = 'Feature',
properties = list(name = 'mypolygon'),
geometry = list(
#type = 'Polygon',
type = 'Point',
coordinates = list(coord_list)
)
)
}
polygons <- mk_polygon(venues$lat, venues$lon)
map$geoJson(list(polygons))
map
list(coord_list)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
runApp(./shinyHW4)
runApp("/shinyHW4")
runApp("./shinyHW4")
runApp("~/shinyHW4")
setwd("/Users/Qian/Documents/STA_250Duncan/HW4/shinyHW4")
runApp()
runApp()
setwd("/Users/Qian/Documents/STA_250Duncan/Project250/shinyapp")
runApp()
ls(mapDep)
unclass(mapDep)
ls(mapDep)
ls(mapDep$marker)
unclass(mapDep$marker)
ls(mapDep$marker)
ls(mapDep)
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("XML")
library("SVGAnnotation")
doc = svgPlot(plot(mpg ~ wt, mtcars,
main = "Motor Trend Car Road Tests", pch=19,
col= "#377EB8"))
# Annotate title and axes
ax = getAxesLabelNodes(doc)
addLink(ax$title, "http://www.motortrend.com", addArea = TRUE)
doc = svgPlot(plot(mpg ~ wt, mtcars,
main = "Motor Trend Car Road Tests", pch=19,
col= "#377EB8"))
ax = getAxesLabelNodes(doc)
addLink(ax$title, "http://www.motortrend.com", addArea = TRUE)
ax = getAxesLabelNodes(doc)
ax = getAxesLabelNodes(doc,addTypes = TRUE)
ax = getAxesLabelNodes(doc)
class(doc)
doc[[1]]
doc
addToolTips(ax[c("xaxis", "yaxis")], tips)
addToolTips(doc, apply(mtcars, 1, function(x)
paste(names(mtcars), x, sep = " = ",
collapse = ", ")))
setwd("/Users/Qian/Documents/STA_250Duncan/HW4/")
svg("quakes.svg")
plot(lat~long, data = quakes)
title("Fiji Region Earthquakes")
plot(lat~long, data = quakes)
plot(lat~long, data = quakes)
quakes
head(quakes)
dev.off()
plot(1:10)
plot(lat~long, data = quakes)
svg("quakes.svg")
plot(lat~long, data = quakes)
title("Fiji Region Earthquakes")
dev.off()
svgPlot({
plot(lat~long, data = quakes)
title("Fiji Region Earthquakes")
}, "quakes.svg")
doc = svgPlot({
plot(lat~long, data = quakes)
title("Fiji Region Earthquakes")
})
doc
depth.col = gray.colors(100)[cut(quakes$depth, 100, label=FALSE)]
depth.ord = rev(order(quakes$depth))
addToolTips(doc, rownames(quakes[depth.ord, ]))
doc = svgPlot(plot(lat~long, data = quakes[depth.ord, ],
pch = 19, col = depth.col[depth.ord],
xlab = "Longitude", ylab="Latitude",
main = "Fiji Region Earthquakes"))
addToolTips(doc, rownames(quakes[depth.ord, ]))
rownames(quakes[depth.ord, ]
)
rev(order(quakes$depth))
order(quakes$depth)
plot(lat~long, data = quakes[depth.ord, ],
pch = 19, col = depth.col[depth.ord],
xlab = "Longitude", ylab="Latitude",
main = "Fiji Region Earthquakes")
doc = svgPlot(plot(lat~long, data = quakes[depth.ord, ],
pch = 19, col = depth.col[depth.ord],
xlab = "Longitude", ylab="Latitude",
main = "Fiji Region Earthquakes"))
addToolTips(doc, rownames(quakes[depth.ord, ]))
addToolTips(doc, rownames(quakes[depth.ord, ]))
addToolTips(doc, rownames(quakes[depth.ord, ]))
addToolTips(doc, rownames(quakes[depth.ord, ]))
addToolTips(doc, rownames(quakes[depth.ord, ]))
mapDe
load("~/Documents/STA_250Duncan/rMaps/airWK.RData")
mapDep
ls(mapDep)
doc = svgPlot(plot(mpg ~ wt, mtcars))
addToolTips(getAxesLabelNodes(doc), c("Weight", "Miles per US Gallon"),
addArea = TRUE)
doc = svgPlot(plot(mpg ~ wt, mtcars))
tips = apply(mtcars, 1,
function(x)
paste(names(mtcars), x, sep = " = ", collapse = ", "))
addToolTips(doc, tips)
addToolTips(doc, rownames(quakes[depth.ord, ]))
ls(mapDep)
mapDep$marker
ls(mapDep)
mapDep$render
mapDep$marker
fullmodel =  lmer( HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2
PixelsSoybeans*PixelsCorn + (1|CountyName),
data =landsat, REML=FALSE))
library("rsae");library("lme4")
data(landsat)
library("rsae");library("lme4")
data(landsat)
fullmodel =  lmer( HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2
PixelsSoybeans*PixelsCorn + (1|CountyName),
data =landsat, REML=FALSE))
fullmodel =  lmer( HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2
PixelsSoybeans*PixelsCorn + (1|CountyName),
data =landsat, REML=FALSE)
fullmodel =  lmer( HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2 +
PixelsSoybeans*PixelsCorn + (1|CountyName),
data =landsat, REML=FALSE)
summary(fullmodel)$AICtab
class(summary(fullmodel)$AICtab)
names(summary(fullmodel)$AICtab)
summary(fullmodel)$AICtab[3]
summary(fullmodel)
ls((fullmodel))
unclass(fullmodel)
Sigma_alpha = as.numeric(VarCorr(fullmodel)[1,2])
Sigma_error = as.numeric(VarCorr(fullmodel)[2,2])
VarCorr(fullmodel)
VarCorr(fullmodel)[1]
VarCorr(fullmodel)[1]
VarCorr(fullmodel)[[1]]
VarCorr(fullmodel)
VarCorr(fullmodel)[1]
VarCorr(fullmodel)[2]
ls(VarCorr(fullmodel))
unclass(VarCorr(fullmodel))
class(VarCorr(fullmodel))
VarCorr(fullmodel)$CountyName
a=VarCorr(fullmodel)$CountyName
View(a)
a=VarCorr(fullmodel)
View(landsat)
unlist(a)
model1 = lme(HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2 +
PixelsSoybeans*PixelsCorn, random = ~ 1|CountyName,
data =landsat method = "ML")
model1 = lme(HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2 +
PixelsSoybeans*PixelsCorn, random = ~ 1|CountyName,
data =landsat,method = "ML")
library("nlme");library("lme4")
fullmodel = lme(HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2 +
PixelsSoybeans*PixelsCorn, random = ~ 1|CountyName,
data =landsat,method = "ML")
summary(fullmodel)
summary(fullmodel)$AICtab
summary(fullmodel)
unclass(summary(fullmodel))
summary(fullmodel)
summary(fullmodel)$BIC
unclass(summary(fullmodel))
LS(summary(fullmodel))
ls(summary(fullmodel))
summary(fullmodel)$logLik
summary(fullmodel)
ls(summary(fullmodel))
summary(fullmodel)$sigma
summary(fullmodel)
Sigma_error = summary(fullmodel)$sigma
ls(summary(fullmodel))
summary(fullmodel)$apVar
summary(fullmodel)$dims
ls(summary(fullmodel))
summary(fullmodel)$varFix
summary(fullmodel)
VarCorr(fullmodel)
as.numeric(VarCorr(fullmodel)[1,2])
Sigma_error = as.numeric(VarCorr(fullmodel)[2,2])
as.numeric(VarCorr(fullmodel)[2,2])
summary(fullmodel)$BIC
summary(fullmodel)$logLik
ls(summary(fullmodel))
summary(fullmodel)$coefficients
summary(fullmodel)$coefficients$$fixed
summary(fullmodel)$coefficients$fixed
beta = summary(fullmodel)$coefficients$fixed
ls(summary(fullmodel))
summary(fullmodel)$logLik
Sigma_alpha = as.numeric(VarCorr(fullmodel)[1,2])
Sigma_error = as.numeric(VarCorr(fullmodel)[2,2])
Beta_full = summary(fullmodel)$coefficients$fixed
Q_full = summary(fullmodel)$logLik
Sigma_alpha = as.numeric(VarCorr(fullmodel)[1,2])
minimodel = lme(HASoybeans ~, random = ~ 1|CountyName,
minimodel = lme(HASoybeans ~ 0, random = ~ 1|CountyName,
data =landsat,method = "ML")
summary(minimodel)$coefficients$fixed
minimodel = lme(HASoybeans ~ 1|CountyName,
data =landsat,method = "ML")
minimodel = lme(HASoybeans ~ 1|CountyName,
data =landsat,method = "ML")
lme(distance ~ age, data = Orthodont)
minimodel = lme(HASoybeans ~ CountyName,
data =landsat,method = "ML")
Orthodont
head(Orthodont)
minimodel = lme(HASoybeans ~  PixelsSoybeans, random = ~ 1|CountyName,
data =landsat,method = "ML")
minimodel = lme(HASoybeans ~  1, random = ~ 1|CountyName,
data =landsat,method = "ML")
summary(minimodel)$coefficients$fixed
summary(minimodel)$logLik
Q_mini = summary(minimodel)$logLik
Q_full
Q_mini
186.1177-156.5042
Q_full = -summary(fullmodel)$logLik
Q_mini = -summary(minimodel)$logLik
Q_full
Q_full
Q_mini
VarCorr(fullmodel
)
error = rnorm(0,Sigma_error)
alpha = rnorm(0,Sigma_alpha)
error
View(landsat)
unique(landsat$CountyName)
length(unique(landsat$CountyName))
length(unique(landsat$CountyName)) # 12
nrow(landsat)
error = rnorm( 37, 0, Sigma_error)
alpha = rnorm( 12, 0, Sigma_alpha)
View(landsat)
model =  lmer( HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2 +
PixelsSoybeans*PixelsCorn + (1|CountyName),
data =landsat, REML=FALSE)
X = as.matrix(model$fr$X)
model
unclass(x)
unclass(model)
colnames(landsat)
landsat[,5:6]
(landsat[,5:6])^2
(landsat[,5:6])^2
(landsat[,5:6])
190^2
(landsat[,5:6])^2
190^2
landsat[,5]*landsat[,6]
X = cbind( rep (1,37), landsat[,5:6], (landsat[,5:6])^2,
landsat[,5]*landsat[,6]) )
X = cbind( rep (1,37), landsat[,5:6], (landsat[,5:6])^2,
landsat[,5]*landsat[,6])
X
View(X)
class(X)
Z = t(model$FL$trms[[1]]$Zt)
model$FL
model
model
ls(model)
unclass(model)
model@fr
ls(model)
model@beta0
summary(model)
model = lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
Z = t(model$FL$trms[[1]]$Zt)
model =  lmer( HASoybeans ~ PixelsSoybeans + PixelsCorn +
PixelsSoybeans^2 + PixelsCorn^2 +
PixelsSoybeans*PixelsCorn + (1|CountyName),
data =landsat, REML=FALSE)
unclass(fullmodel)
remat <- summary(model)@REmat
class(model)
selectMethod("print", "mer")
class(mpdel)
class(model)
class(fullmodel)
t(as.matrix(getME(fullmodel,'Zt')))
getME(fullmodel,'Zt')
library("rsae");library("lme4");library("nlme")
